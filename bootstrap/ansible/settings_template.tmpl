import os

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {{ debug }}

ALLOWED_HOSTS = ['0.0.0.0', '{{ hostname }}', '{{ host_ip }}']

PORTAL_NAME = '{{ portal_name }}'
PROGRAM_NAME_LONG = '{{ program_name_long }}'
PROGRAM_NAME_SHORT = '{{ program_name_short }}'
PRIMARY_CLUSTER_NAME = '{{ primary_cluster_name }}'

CENTER_NAME = PROGRAM_NAME_SHORT + ' HPC Resources'
CENTER_BASE_URL = '{{ full_host_path }}'
CENTER_HELP_URL = CENTER_BASE_URL + '/help'
CENTER_PROJECT_RENEWAL_HELP_URL = CENTER_BASE_URL + '/help'

EMAIL_PORT = {{ email_port }}
EMAIL_SUBJECT_PREFIX = '{{ email_subject_prefix }}'
EMAIL_ADMIN_LIST = ['admin@{{ hostname }}']
EMAIL_SENDER = '{{ from_email }}'
EMAIL_TICKET_SYSTEM_ADDRESS = 'help@{{ hostname }}'
EMAIL_DIRECTOR_EMAIL_ADDRESS = 'director@{{ hostname }}'
EMAIL_PROJECT_REVIEW_CONTACT = 'review@{{ hostname }}'
EMAIL_DEVELOPMENT_EMAIL_LIST = ['dev1@{{ hostname }}', 'dev2@{{ hostname }}']
EMAIL_OPT_OUT_INSTRUCTION_URL = CENTER_BASE_URL + '/optout'
EMAIL_SIGNATURE = """
{{ portal_name }} User Portal team
{{ full_host_path }}
Email : {{ from_email }}
"""

EMAIL_FROM = '{{ from_email }}'
EMAIL_ADMIN = '{{ admin_email }}'
DEFAULT_FROM_EMAIL = EMAIL_FROM

ACCOUNT_DELETION_AUTO_QUEUE_DAYS = {{ account_deletion_auto_queue_days }}
ACCOUNT_DELETION_MANUAL_QUEUE_DAYS = {{ account_deletion_manual_queue_days }}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_admin_user }}',
        'PASSWORD': '{{ db_admin_passwd }}',
        'HOST': 'localhost',
        'PORT': '5432',
    },
}

LOG_PATH = '{{ log_path }}/{{ portal_log_file }}'
API_LOG_PATH = '{{ log_path }}/{{ api_log_file }}'

# A list of admin email addresses to CC when certain requests are approved.
REQUEST_APPROVAL_CC_LIST = {{ request_approval_cc_list }}

# Use a secure cookie for the session cookie (HTTPS only).
{% if ssl_enabled | bool %}
SESSION_COOKIE_SECURE = True
{% else %}
SESSION_COOKIE_SECURE = False
{% endif %}

# Configure Sentry.
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import ignore_logger


{% if sentry_dsn|length > 0 %}
SENTRY_DSN = '{{ sentry_dsn.strip() }}'
{% else %}
SENTRY_DSN = ''
{% endif %}
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        traces_sample_rate=0.01,
        send_default_pii=True)
    # Ignore noisy loggers.
    ignore_logger('coldfront.api')
    ignore_logger('coldfront.core.utils.middleware')

#------------------------------------------------------------------------------
# Django All-Auth settings
#------------------------------------------------------------------------------

CILOGON_APP_CLIENT_ID = '{{ cilogon_app_client_id }}'
CILOGON_APP_SECRET = '{{ cilogon_app_secret }}'

#------------------------------------------------------------------------------
# django-constance settings
#------------------------------------------------------------------------------

from datetime import date


CONSTANCE_CONFIG = {
    'FEEDBACK_FORM_URL': ('', 'The URL to the feedback form.'),
    'DOCS_GETTING_HELP_URL': (
        '', 'The URL to the documentation page on getting help.'),
    'LAUNCH_DATE': (date(1970, 1, 1), 'The date the portal was launched.'),
}
CONSTANCE_REDIS_CONNECTION = {
    'host': '127.0.0.1',
    'port': 6379,
    'db': 0,
    'password': '{{ redis_passwd }}',
}

#------------------------------------------------------------------------------
# django-flags settings
#------------------------------------------------------------------------------

FLAGS = {
    'ALLOCATION_RENEWAL_FOR_NEXT_PERIOD_REQUESTABLE': [
        {'condition': 'during month', 'value': '{{ flag_next_period_renewal_requestable_month }}'},
    ],
    'BASIC_AUTH_ENABLED': [{'condition': 'boolean', 'value': {{ flag_basic_auth_enabled }}}],
    'BRC_ONLY': [{'condition': 'boolean', 'value': {{ flag_brc_enabled }}}],
    'LRC_ONLY': [{'condition': 'boolean', 'value': {{ flag_lrc_enabled }}}],
    'CLUSTER_ACCOUNTS_DELETABLE': [{'condition': 'boolean', 'value': {{ flag_lrc_enabled }}}],
    'SECURE_DIRS_REQUESTABLE': [{'condition': 'boolean', 'value': {{ flag_brc_enabled }}}],
    'SERVICE_UNITS_PURCHASABLE': [{'condition': 'boolean', 'value': {{ flag_brc_enabled }}}],
    'SSO_ENABLED': [{'condition': 'boolean', 'value': {{ flag_sso_enabled }}}],
}

#------------------------------------------------------------------------------
# django-q settings
#------------------------------------------------------------------------------

Q_CLUSTER = {
    'redis': {
        'host': '127.0.0.1',
        'port': 6379,
        'db': 0,
        'password': '{{ redis_passwd }}',
    }
}
