---

- name: MyBRC/LRC User Portal VM Playbook
  gather_facts: true
  hosts:
    - all
    - "{{ domain }}"
  become: true
  become_user: root
  become_method: sudo

  vars:
    cwd: "{{ lookup('env', 'PWD') }} "
    provisioning_tasks: true
    common_tasks: true

    python_version_dotless: "{{ python_version | regex_replace('\\.','') }}"
    postgres_version_dotless: "{{ postgres_version | regex_replace('\\.','') }}"

  vars_files:
    - "../../main.yml"

  tasks:
    # Provisioning tasks that can generally be skipped after the first time.
    - name: Run Provisioning Tasks
      block:
        - name: Stop and disable NetworkManager service
          service:
            name: NetworkManager
            state: stopped
            enabled: false

        - name: Disable SELinux
          ansible.posix.selinux:
            policy: targeted
            state: disabled

        # Install yum packages.

        - name: Install required packages
          yum:
            name:
              - curl
              - texinfo
              - ntp
              - zlib-devel
              - libcurl-devel
              - Cython
              - bzip2-devel
              - openssl
              - openssl-devel
              - git-core
              - gcc-c++
              - libffi-devel
            state: present

        # # From https://github.com/narbutas/ansible-python37-centos7/blob/master/tasks/install-python.yml
        # # modified ./configure to include --enable-shared
        # - name: "Get current python3 version"
        #   shell: /usr/local/bin/python3 --version |sed 's/^Python //'
        #   register: python_version_current
        #   changed_when: 'python_version_current.stdout != python_version'
        #   check_mode: false

        # - block:
        #   - name: "Download python {{ python_version }} source code"
        #     get_url:
        #       url: https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz
        #       dest: /usr/src/Python-{{ python_version }}.tgz
        #       mode: '0644'
        #     become: true

        #   - name: "Unpack python {{ python_version }} source code"
        #     unarchive:
        #       src: /usr/src/Python-{{ python_version }}.tgz
        #       dest: /usr/src/
        #       remote_src: true
        #     become: true

        #   - name: "Run 'configure' target as root"
        #     command: chdir=/usr/src/Python-{{ python_version }} ./configure --enable-optimizations --enable-shared
        #     become: true
        #     tags: skip_ansible_lint

        #   - name: "Run 'make install' target as root"
        #     make:
        #       chdir: /usr/src/Python-{{ python_version }}
        #       target: install
        #       file: /usr/src/Python-{{ python_version }}/Makefile
        #     become: true
        #     tags: skip_ansible_lint

        #   - name: Mark python as existing
        #     file:
        #       path: /usr/src/Python-{{ python_version }}/exists
        #       state: touch
        #       mode: 0644

        #   - name: "Remove python source code archive"
        #     file:
        #       path: /usr/src/Python-{{ python_version }}.tgz
        #       state: absent
        #     become: true
        #   when: 'python_version_current.stdout != python_version'

        - name: Install Python {{ python_version }}
          include_role:
            role: smbambling.scl
          vars:
            scl_packages:
              - name: rh-python{{ python_version_dotless }}-python
              - name: rh-python{{ python_version_dotless }}-python-devel
              - name: rh-python{{ python_version_dotless }}-python-pip
              # - name: rh-python{{ python_version_dotless }}
        
        # - name: Permanently enable Python and Postgres in SCL.
        #   copy:
        #     content: |
        #       #!/bin/bash
        #       source scl_source enable rh-python{{ python_version_dotless }}
        #       source scl_source enable rh-postgresql{{ postgres_version_dotless }}
        #     dest: /etc/profile.d/ansible_scl_enable.sh
        #     owner: root
        #     group: root
        #     mode: 0644

        - name: Install required web packages
          yum:
            name:
              - httpd
              - httpd-devel
              - module-init-tools
              - ModemManager
              - mod_ssl
            state: present

        - name: Install Redis
          yum:
            name:
              - redis
            state: present

        - name: Set Redis password
          lineinfile:
            path: /etc/redis.conf
            regexp: '^requirepass '
            insertafter: '^# requirepass foobared'
            line: 'requirepass {{ redis_passwd }}'

        - name: Install Supervisor
          yum:
            name:
              - supervisor
            state: present

        # ini_file is included in community.general.
        - name: Set django_q command in supervisord.conf
          ini_file:
            path: /etc/supervisord.conf
            section: 'program:django_q'
            option: 'command'
            value: '{{ git_prefix }}/venv/bin/python3 {{ git_prefix }}/{{ reponame }}/manage.py qcluster'

        - name: Set django_q stopasgroup in supervisord.conf
          ini_file:
            path: /etc/supervisord.conf
            section: 'program:django_q'
            option: 'stopasgroup'
            value: 'true'

        - name: Set django_q numprocs in supervisord.conf
          ini_file:
            path: /etc/supervisord.conf
            section: 'program:django_q'
            option: 'numprocs'
            value: '1'

        - name: Add yum repository
          yum_repository:
            name: postgres-repository
            description: postgres repository
            baseurl: https://download.postgresql.org/pub/repos/yum/{{ postgres_version }}/redhat/rhel-7-x86_64/
            gpgkey: http://yum.postgresql.org/RPM-GPG-KEY-PGDG-94
            
        - name: Install Postgresql packages
          yum:
            name:
              - 'postgresql{{ postgres_version }}'
              - 'postgresql{{ postgres_version }}-libs'
              - 'postgresql{{ postgres_version }}-devel'
              - 'postgresql{{ postgres_version }}-test'
              - 'postgresql{{ postgres_version }}-server'
            state: present

        # - name: Install Postgresql packages
        #   include_role:
        #     role: smbambling.scl
        #     tasks_from: packages
        #   vars:
        #     scl_packages:
        #       - name: rh-postgresql{{ postgres_version_dotless }}
        #       - name: rh-postgresql{{ postgres_version_dotless }}-postgresql
        #       - name: rh-postgresql{{ postgres_version_dotless }}-postgresql-libs
        #       - name: rh-postgresql{{ postgres_version_dotless }}-postgresql-devel
        #       - name: rh-postgresql{{ postgres_version_dotless }}-postgresql-test
        #       - name: rh-postgresql{{ postgres_version_dotless }}-postgresql-server

        # - name: Install Postgresql packages
        #   yum:
        #     name:
        #       - 'https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/postgresql96-9.6.24-1PGDG.rhel7.x86_64.rpm'
        #       - 'https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/postgresql96-libs-9.6.24-1PGDG.rhel7.x86_64.rpm'
        #       - 'https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/postgresql96-devel-9.6.24-1PGDG.rhel7.x86_64.rpm'
        #       - 'https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/postgresql96-test-9.6.24-1PGDG.rhel7.x86_64.rpm'
        #       - 'https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/postgresql96-server-9.6.24-1PGDG.rhel7.x86_64.rpm'
        #     state: present

        # Configure PostgreSQL.

        - name: Check if PostgreSQL is initialized
          stat:
            path: /var/lib/pgsql/{{ postgres_version }}/data/PG_VERSION
          register: pgdata_dir_version

        - name: Initialize PostgreSQL if not already initialized
          command: /usr/pgsql-{{ postgres_version }}/bin/postgresql-{{ postgres_version_dotless }}-setup initdb
          when: not pgdata_dir_version.stat.exists

        - name: Start and enable PostgreSQL service
          service:
            name: postgresql-{{ postgres_version }}
            state: started
            enabled: true

        - name: Update pg_hba.conf to change host auth from ident to md5 (1/2)
          postgresql_pg_hba:
            dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
            backup: true
            method: md5
            contype: host
            source: ::1

        - name: Update pg_hba.conf to change host auth from ident to md5 (2/2)
          postgresql_pg_hba:
            dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
            backup: true
            method: md5
            contype: host
            source: 127.0.0.1/32

        - name: Update pg_hba.conf to set authentication for all to md5
          postgresql_pg_hba:
            dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
            backup: true
            method: md5
            contype: host
            source: "0.0.0.0/0"

        # Create Django application log files.

        - name: Create a parent directory for storing Django application logs
          file:
            path: "{{ log_path }}"
            state: directory
            mode: 0775
            owner: "{{ djangooperator }}"
            group: apache

        - name: Create a log file for Django portal logs
          copy:
            content: ""
            force: false
            dest: "{{ log_path }}/{{ portal_log_file }}"
            mode: 0660
            owner: "{{ djangooperator }}"
            group: apache

        - name: Create a log file for Django API logs
          copy:
            content: ""
            force: false
            dest: "{{ log_path }}/{{ api_log_file }}"
            mode: 0660
            owner: "{{ djangooperator }}"
            group: apache

        # Prepare the Python virtual environment for the Django application.

        - name: Create Python virtual environment directory
          file:
            path: "{{ git_prefix }}/venv"
            state: directory
            mode: 0755
            owner: "{{ djangooperator }}"
            group: apache

        - name: Initialize Python virtual environment
          shell: >
              test -f {{ git_prefix }}/venv/bin/activate
              || (/opt/rh/rh-python{{ python_version_dotless }}/root/usr/bin/python -m venv {{ git_prefix }}/venv
              && echo created)
          register: venv_register
          become_user: "{{ djangooperator }}"
          changed_when: venv_register.stdout == "created"

        # Install Django application dependencies, including psycopg2,
        # required to create the PostgreSQL database and user, and mod-wsgi,
        # required to configure apache.

        - name: Install Django application dependencies
          pip:
            requirements: "{{ git_prefix }}/{{ reponame }}/requirements.txt"
            executable: "{{ git_prefix }}/venv/bin/pip3"
          become_user: "{{ djangooperator }}"
          environment: # needed as pg_config isn't in PATH by default
            PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgres_version }}/bin"

        # TODO: If this raises an error, the token is exposed in stderr.
        - name: Install the Python package for validating LBL billing IDs
          pip:
            name: 'git+https://{{ billing_validation_repo_username }}:{{ billing_validation_repo_token }}@{{ billing_validation_repo_host }}'
            executable: '{{ git_prefix }}/venv/bin/pip3'
          when: install_billing_validation_package
          no_log: true

        # Create a PostgreSQL database and a user for the Django application.

        - name: Create a new PostgreSQL database
          postgresql_db:
            name: "{{ db_name }}"
          become_user: postgres
          vars:
            ansible_python_interpreter: "{{ git_prefix }}/venv/bin/python3"

        - name: Create a PostgreSQL admin user and grant permissions
          postgresql_user:
            name: "{{ db_admin_user }}"
            db: "{{ db_name }}"
            priv: ALL
            password: "{{ db_admin_passwd }}"
            role_attr_flags: CREATEDB
          become_user: postgres
          vars:
            ansible_python_interpreter: "{{ git_prefix }}/venv/bin/python3"

        # Configure Apache.

        - name: Check if the mod_wsgi module from Python {{ python_version }} is installed to Apache
          stat:
            path: /etc/httpd/conf.modules.d/02-wsgi.conf
          register: mod_wsgi_installed

        - name: Install the mod_wsgi module from Python {{ python_version }} to Apache
          shell: "{{ git_prefix }}/venv/bin/mod_wsgi-express install-module --modules-directory /etc/httpd/modules > /etc/httpd/conf.modules.d/02-wsgi.conf"
          when: not mod_wsgi_installed.stat.exists

      when: provisioning_tasks == true
      tags: provisioning

    # Production only provisioning tasks.
    - name: Run Production provisioning Tasks
      block:
        ## BRC-only
        - name: BRC-only Production Tasks
          block:
            # Don't do anything as there aren't any provisioning-specific tasks yet.
            - meta: noop
          when: flag_brc_enabled

        ## LRC-only
        - name: LRC-only Production Tasks
          block:

            # Send logs to LBL.

            - name: Update syslog config to send logs to LBL central server
              blockinfile:
                state: present
                destfile: /etc/rsyslog.conf
                insertbefore: "# ### begin forwarding rule ###"
                block: |
                  # Send copy of logs to LBL's central syslog server
                  *.* @syslog.lbl.gov

            - name: Restart rsyslog
              service:
                name: rsyslog
                state: restarted
                enabled: true

            # Configure the firewall.

            - name: Start and enable firewalld service
              service:
                name: firewalld
                state: started
                enabled: true

            - name: Permit http traffic in public zone
              ansible.posix.firewalld:
                zone: public
                service: http
                state: enabled
                permanent: true

            - name: Run Cloudflare Tasks
              block:
                # 443/tcp should only be allowed in Cloudflare IP ranges.
                # https://commons.lbl.gov/pages/viewpage.action?pageId=203489943
                - name: Do not permit https traffic in public zone
                  ansible.posix.firewalld:
                    zone: public
                    service: https
                    state: disabled
                    permanent: true

                - name: Deny 443/tcp in public zone
                  ansible.posix.firewalld:
                    zone: public
                    port: 443/tcp
                    state: disabled
                    permanent: true

                - name: Create firewalld zone for Cloudflare IP ranges
                  ansible.posix.firewalld:
                    zone: cloudflare
                    state: present
                    permanent: true

                # Firewalld must be reloaded after zone transactions.
                # https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html#notes
                - name: Reload firewalld service
                  service:
                    name: firewalld
                    state: reloaded

                - name: Add Cloudflare IP ranges to Cloudflare zone
                  ansible.posix.firewalld:
                    zone: cloudflare
                    source: "{{ item }}"
                    permanent: true
                    state: enabled
                  loop: "{{ cloudflare_ip_ranges }}"

                - name: Permit http and https traffic in Cloudflare zone
                  ansible.posix.firewalld:
                    zone: cloudflare
                    service: "{{ item }}"
                    state: enabled
                    permanent: true
                  loop:
                    - http
                    - https

                # Log the original client IP address of each request instead of the Cloudflare IP.
                # Source: https://support.cloudflare.com/hc/en-us/articles/200170786-Restoring-original-visitor-IPs#C5XWe97z77b3XZV
                - name: Update httpd combined LogFormat in accordance with mod_remoteip
                  lineinfile:
                    path: /etc/httpd/conf/httpd.conf
                    regexp: '^    LogFormat .+ combined$'
                    line: '    LogFormat "%a %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined'

              when: cloudflare_enabled

            - name: Reload firewalld service
              service:
                name: firewalld
                state: reloaded

          when: flag_lrc_enabled

      when: provisioning_tasks == true and deployment == "prod"
      tags: provisioning

    # Staging only provisioning tasks.
    - name: Run Staging Provisioning Tasks
      block:
        # Don't do anything as there aren't any provisioning-specific tasks yet.
        - name: Install vim
          yum:
            name: vim
            state: present

        - name: Modify .bashrc to start in application directory by default
          lineinfile:
            path: ~/.bashrc
            line: cd {{ git_prefix }}/{{ reponame }} && source ../venv/bin/activate

      # Uncomment when tasks are added.
      when: provisioning_tasks == true and deployment == "staging"
      tags: provisioning

    # Development only provisioning tasks.
    - name: Run Development Provisioning Tasks
      block:
        # Don't do anything as there aren't any development-specific tasks yet.
        - meta: noop
      # Uncomment when tasks are added.
      # when: provisioning_tasks == true and deployment == "dev"
      tags: provisioning

    # Non-provisioning tasks common to development and production.
    # Meant to be re-run frequently.
    - name: Run Common Tasks
      block:

        # Configure Apache.

        - name: Create a WSGI configuration file from a template if SSL is disabled
          template:
            src: "{{ git_prefix }}/{{ reponame }}/bootstrap/ansible/wsgi_conf.tmpl"
            dest: /etc/httpd/conf.d/{{ wsgi_conf_file_name }}
          when: not ssl_enabled

        - name: Create a WSGI configuration file from a template if SSL is enabled
          template:
            src: "{{ git_prefix }}/{{ reponame }}/bootstrap/ansible/wsgi_conf_ssl.tmpl"
            dest: /etc/httpd/conf.d/{{ wsgi_conf_file_name }}
          when: ssl_enabled

        # Configure the Django application.

        - name: Copy the ColdFront local_settings.py file from the sample
          copy:
            src: "{{ git_prefix }}/{{ reponame }}/coldfront/config/local_settings.py.sample"
            dest: "{{ git_prefix }}/{{ reponame }}/coldfront/config/local_settings.py"

        - name: Copy the ColdFront local_strings.py file from the sample
          copy:
            src: "{{ git_prefix }}/{{ reponame }}/coldfront/config/local_strings.py.sample"
            dest: "{{ git_prefix }}/{{ reponame }}/coldfront/config/local_strings.py"

        - name: Create the deployment-specific _settings.py file from a template
          template:
            src: "{{ git_prefix }}/{{ reponame }}/bootstrap/ansible/settings_template.tmpl"
            dest: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}/config/{{ deployment }}_settings.py"

        - name: Create the deployment-specific password reset email subject text file from a template
          template:
            src: "{{ git_prefix }}/{{ reponame }}/bootstrap/ansible/password_reset_subject_template.tmpl"
            dest: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}/core/user/templates/user/passwords/password_reset_subject.txt"

        # Restart Services.

        - name: Restart and enable Redis service
          service:
            name: redis
            state: restarted
            enabled: true

        - name: Restart and enable Supervisor service
          service:
            name: supervisord
            state: restarted
            enabled: true

        - name: Restart and enable PostgreSQL service
          service:
            name: postgresql-{{ postgres_version }}
            state: restarted
            enabled: true

        # Install Django application dependencies

        - name: Install Django application dependencies
          pip:
            requirements: "{{ git_prefix }}/{{ reponame }}/requirements.txt"
            executable: "{{ git_prefix }}/venv/bin/pip3"
          become_user: "{{ djangooperator }}"
          environment: # needed as pg_config isn't in PATH by default
            PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgres_version }}/bin"

        # Run Django management commands.

        - name: Run Django management command - initial_setup
          django_manage:
            command: initial_setup
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - migrate
          django_manage:
            command: migrate
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - add_accounting_defaults
          django_manage:
            command: add_accounting_defaults
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - add_allowance_defaults
          django_manage:
            command: add_allowance_defaults
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - add_directory_defaults
          django_manage:
            command: add_directory_defaults
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - create_allocation_periods
          django_manage:
            command: create_allocation_periods
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - create_staff_group
          django_manage:
            command: create_staff_group
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        - name: Run Django management command - collectstatic
          django_manage:
            command: collectstatic --noinput
            app_path: "{{ git_prefix }}/{{ reponame }}"
            settings: "config.settings"
            pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
            virtualenv: "{{ git_prefix }}/venv"
          become_user: "{{ djangooperator }}"

        # Grant Apache read access to Django application files.

        - name: Grant Apache read access to the application's parent directory
          file:
            path: "{{ git_prefix }}"
            state: directory
            mode: 0755
            group: apache

        - name: Grant Apache recursive read access to the application directory
          file:
            path: "{{ git_prefix }}/{{ reponame }}"
            state: directory
            recurse: true
            mode: "u=rwX,g=rX,o=rX"
            group: apache

        - name: Reload httpd service
          service:
            name: httpd
            state: reloaded

        # supervisorctl is included in community.general.
        - name: Ensure that a Supervisor worker is running a django_q cluster
          supervisorctl:
            name: 'django_q'
            state: started

      when: provisioning_tasks == true or common_tasks == true
      tags:
        - provisioning
        - common
