# Decompoe the stack into microservices running in Docker, orchestrated with Docker Compose.
# Use cases:

# People with MacBooks with M1 chips aren’t able to use VirtualBox right now, so we need an alternative for them.
# The group is bringing up an internal Kubernetes cluster. It’d be nice to have multiple staging instances that we can easily bring up so that we can stage multiple branches at the same time.
# This should be more lightweight/faster than a VM.
# The deliverable would be a set of Docker images (Postgres, Redis, one to run the web service, etc.) and a Docker Compose file to run them.
# I’m not exactly sure how Ansible is going to fit into this picture. Maybe Ansible just creates configuration files that get injected into containers. Let me know if you have thoughts on / experience with this.# Docker Compose

services:
  db:
    image: postgres:15
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: cf_brc_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "cf_brc_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  coldfront:
    image: coldfront:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8880:80
    volumes:
      - ./coldfront:/vagrant/coldfront_app/coldfront/coldfront
    extra_hosts:
        - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db_data:
    external: false
  redis_data:
    external: false

